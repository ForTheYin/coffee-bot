<div class="bootstrap">

  <!-- Bootstrap core CSS-->
  <link href="/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">

  <!-- Custom fonts for this template-->
  <link href="/vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">

  <!-- Page level plugin CSS-->
  <link href="/vendor/datatables/dataTables.bootstrap4.css" rel="stylesheet">

  <div id="content-wrapper">

    <div class="container-fluid">

      <!-- Breadcrumbs-->
      <ol class="breadcrumb">
        <li class="breadcrumb-item">
          <a href="#">Dashboard</a>
        </li>
        <li class="breadcrumb-item active">Overview</li>
      </ol>

      <!-- Icon Cards-->
      <div class="row">
        <div class="col-xs-2 p-3">
          <div class="card text-white bg-danger o-hidden h-100">
            <div class="card-body">
              <div class="card-body-icon">
                <i class="fas fa-fw fa-coffee"></i>
              </div>
              <div class="mr-5 coffee-info">Current Coffee Temperature: <%= @last_machine_temperature.degree %>°C</div>
            </div>
            <a class="card-footer text-white clearfix small z-1" href="#">
              <span class="float-left">View Details</span>
              <span class="float-right">
                <i class="fas fa-angle-right"></i>
              </span>
            </a>
          </div>
        </div>
        <div class="col-xs-2 p-3">
          <div class="card text-white bg-secondary o-hidden h-100">
            <div class="card-body">
              <div class="card-body-icon">
                <i class="fas fa-fw fa-dumbbell"></i>
              </div>
              <div class="mr-5"> What kind of brew do you wanna make?</div>
            </div>
            <div class="btn-group btn-group-toggle" data-toggle="buttons">
              <label class="btn btn-secondary active">
                <input type="radio" name="options" id="option1" autocomplete="off" checked> Regular
              </label>
              <label class="btn btn-secondary">
                <input type="radio" name="options" id="option2" autocomplete="off"> Strong
              </label>
            </div>
          </div>
        </div>
        <div class="col-xs-2 p-3">
          <div class="card text-white bg-secondary o-hidden h-100">
            <div class="card-body">
              <div class="card-body-icon">
                <i class="fas fa-fw fa-exclamation"></i>
              </div>
              <div class="mr-5"> Actions</div>
            </div>
            <div class="btn-group">
              <button type="button" class="btn btn-success brew-coffee-btn">Brew</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Area Chart Example-->
      <div class="card mb-3">
        <div class="card-header">
          <i class="fas fa-chart-area"></i>
          Temperature History
        </div>
        <div class="card-body">
          <canvas id="myAreaChart" width="100%" height="30"></canvas>
        </div>
        <div class="card-footer small text-muted">Updated yesterday at 11:59 PM</div>
      </div>

      <!-- DataTables Example -->
      <div class="card mb-3">
        <div class="card-header">
          <i class="fas fa-table"></i>
          Historic Actions
        </div>
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-bordered" id="dataTable" width="100%" cellspacing="0">
              <thead>
              <tr>
                <th>UUID</th>
                <th>Status</th>
                <th>Action</th>
                <th>Schedule At</th>
                <th>Created At</th>
                <th>Updated At</th>
              </tr>
              </thead>
              <tfoot>
              <tr>
                <th>UUID</th>
                <th>Status</th>
                <th>Action</th>
                <th>Schedule At</th>
                <th>Created At</th>
                <th>Updated At</th>
              </tr>
              </tfoot>
              <tbody>

              <% @performed_actions.each do |performed_action| %>
                <tr>
                  <td><%= performed_action.uuid %></td>
                  <td><%= performed_action.status %></td>
                  <td><%= performed_action.action %></td>
                  <td><%= performed_action.scheduled_at %></td>
                  <td><%= performed_action.created_at %></td>
                  <td><%= performed_action.updated_at %></td>
                </tr>
              <% end %>
              </tbody>
            </table>
          </div>
        </div>
        <div class="card-footer small text-muted">Last updated at <%= @last_performed_action.updated_at %></div>
      </div>

    </div>
    <!-- /.container-fluid -->

  </div>
  <!-- /.content-wrapper -->

</div>
<!-- /#wrapper -->

<!-- Scroll to Top Button-->
<a class="scroll-to-top rounded" href="#page-top">
  <i class="fas fa-angle-up"></i>
</a>

<!-- Bootstrap core JavaScript-->
<script src="/vendor/jquery/jquery.min.js"></script>
<script src="/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

<!-- Core plugin JavaScript-->
<script src="/vendor/jquery-easing/jquery.easing.min.js"></script>

<!-- Page level plugin JavaScript-->
<script src="/vendor/chart.js/Chart.min.js"></script>

<!-- Demo scripts for this page-->
<script src="/js/demo/datatables-demo.js"></script>
<script>
    $(document).ready(function () {
        $('#dataTable').DataTable();
    });

    (function () {
        'use strict';

        // Set new default font family and font color to mimic Bootstrap's default styling
        Chart.defaults.global.defaultFontFamily = '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
        Chart.defaults.global.defaultFontColor = '#292b2c';

        // Area Chart Example
        let chart;
        const ctx = document.getElementById("myAreaChart");

        function clearTemperatures() {
            if (chart !== undefined) {
                ctx.destroy();
            }

            chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [],
                    datasets: [{
                        label: "Sessions",
                        lineTension: 0.3,
                        backgroundColor: "rgba(2,117,216,0.2)",
                        borderColor: "rgba(2,117,216,1)",
                        pointRadius: 5,
                        pointBackgroundColor: "rgba(2,117,216,1)",
                        pointBorderColor: "rgba(255,255,255,0.8)",
                        pointHoverRadius: 5,
                        pointHoverBackgroundColor: "rgba(2,117,216,1)",
                        pointHitRadius: 50,
                        pointBorderWidth: 2,
                        data: [],
                    }],
                },
                options: {
                    scales: {
                        xAxes: [{
                            time: {
                                unit: 'date'
                            },
                            gridLines: {
                                display: false
                            },
                            ticks: {
                                maxTicksLimit: 7
                            }
                        }],
                        yAxes: [{
                            ticks: {
                                min: 0,
                                max: 150,
                                maxTicksLimit: 5
                            },
                            gridLines: {
                                color: "rgba(0, 0, 0, .125)",
                            }
                        }],
                    },
                    legend: {
                        display: false
                    }
                }
            });
        }

        function refreshTemperatures() {
            return fetch('/temperatures/<%= @machine.uuid %>')
                .then((res) => res.json())
                .then(function (json) {
                    clearTemperatures();

                    // Add data
                    json.current_state.temperatures.forEach((temperature) => {
                        chart.data.labels.push(Date.parse(temperature.updated_at));
                        chart.data.datasets.forEach((dataset) => {
                            dataset.data.push(temperature.degree);
                        });
                    });

                    chart.update();
                });
        }

        function loopTemperatures() {
            setTimeout(function () {
                refreshTemperatures()
                    .then(function () {
                        loopTemperatures();
                    })
            }, 10000);
        }

        loopTemperatures();
    })();

    (function () {

        function refreshTemperature() {
            return fetch('/queued/<%= @machine.uuid %>')
                .then((res) => res.json())
                .then(function (json) {
                    $('.coffee-info').text(`Current Coffee Temperature: ${json.current_state.temperature}°C`);
                });
        }

        function loopTemperature() {
            setTimeout(function () {
                refreshTemperature()
                    .then(function () {
                        loopTemperature();
                    })
            }, 10000);
        }

        function brew() {
            return fetch('/brew/<%= @machine.uuid %>', {
                method: 'POST'
            })
        }

        loopTemperature();

        $('.brew-coffee-btn').click(brew);
    })();

</script>

</div>